<?php

/**
 * @file
 * Install, update and uninstall functions for the DU Core install profile.
 */

use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function ducore_install() {
  $logger = \Drupal::logger('ducore');
  $logger->notice('Starting ducore_install');

  // Store the original theme before changing it.
  $original_theme = \Drupal::config('system.theme')->get('default');
  $logger->notice('Storing original theme: @theme', ['@theme' => $original_theme]);
  \Drupal::state()->set('ducore.original_theme', $original_theme);

  // Install and enable the new theme.
  $logger->notice('Installing du_bootstrap theme');
  \Drupal::service('theme_installer')->install(['du_bootstrap']);

  // Set the default and admin themes.
  $logger->notice('Setting du_bootstrap as default theme');
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'du_bootstrap')
    ->set('admin', 'claro')
    ->save(TRUE);

  // Set default theme settings for du_bootstrap.
  \Drupal::configFactory()
    ->getEditable('du_bootstrap.settings')
    ->set('subtheme_selection', 'unit')
    ->set('site_prefix', 'University of')
    ->set('site_name', 'Denver')
    ->save(TRUE);

  // Set the front page to "/node".
  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('page.front', '/node')
    ->save(TRUE);

  // Allow visitor account creation with administrative approval.
  \Drupal::configFactory()
    ->getEditable('user.settings')
    ->set('register', UserInterface::REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)
    ->save(TRUE);

  // Enable default permissions for system roles.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['access content']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access content']);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->addRole('administrator');
  $user->save();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // Enable the admin theme.
  \Drupal::configFactory()
    ->getEditable('node.settings')
    ->set('use_admin_theme', TRUE)
    ->save(TRUE);

  $logger->notice('ducore_install completed successfully');
}

/**
 * Implements hook_install_tasks_alter().
 */
function ducore_install_tasks_alter(array &$tasks, array $install_state) {
  $tasks['install_finished']['function'] = 'ducore_after_install_finished';
}

/**
 * DU Core tasks to do after install finished.
 *
 * Add term for protected page permission.
 *
 * @param array $install_state
 *   The current install state.
 *
 * @return array
 *   A renderable array with a redirect header.
 */
function ducore_after_install_finished(array &$install_state) {
  $new_term = Term::create([
    'vid' => 'permissions',
    'name' => 'DU Faculty, Staff and Students using SSO',
  ]);

  $new_term->enforceIsNew();
  $new_term->save();

  node_access_rebuild(TRUE);

  \Drupal::messenger()->deleteAll();

  // @TODO - Add default content during install using
  // https://www.drupal.org/project/default_content

  // Set front page and 404 defaults to default_content.
  // \Drupal::configFactory()
  //  ->getEditable('system.site')
  //  ->set('page.front', '/home')
  //  ->set('page.404', '/404')
  //  ->set('page.403', '/403')
  //  ->save(TRUE);
}

/**
 * Enable Key and Pantheon Secrets modules on existing installs
 */
function ducore_update_9501() {
  $modules = array(
    'key',
    'pantheon_secrets'
  );
  \Drupal::service('module_installer')->install($modules, TRUE);
}

/**
 * Update Site Admin Permissions
 */
function ducore_update_9502() {
  $config_id = 'user.role.site_admin';
  $config_path = \Drupal::service('extension.list.module')->getPath('ducore') . '/config/install/' . $config_id .'.yml';
  $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
  \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
}

/**
 * Enable CKEditor5 modules on existing installs
 */
function ducore_update_9503() {
  $modules = array(
    'ckeditor5',
    'blazy',
    'media',
    'slick',
    'token_filter'
  );
  \Drupal::service('module_installer')->install($modules, TRUE);
}

/**
 * Configuration for CKEditor5 and Text Format (Rich Text) for existing installs
 */
function ducore_update_9504() {
  // While Rich Text is new we made some updates to the existing file / entity browser.
  $config_ids = array(
    'filter.format.rich_text',
    'editor.editor.rich_text',
    'embed.button.file_browser',
    'entity_browser.browser.browse_files'
  );

  // Loop through each configuration and, even if it exists, overwrite it.
  foreach ($config_ids as $config_id) {
    $config_path = \Drupal::service('extension.list.module')->getPath('ducore') . '/config/install/' . $config_id . '.yml';
    $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
    \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
  }
}

/**
 * Change admin theme, enable toolbar improvements, fix qa_account logins
 */
function ducore_update_9505() {
  $modules = array(
    'environment_indicator',
    'pantheon_autopilot_toolbar'
  );
  \Drupal::service('module_installer')->install($modules, TRUE);
  \Drupal::service('theme_installer')->install(['claro']);

  // Set the default and admin themes.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('admin', 'claro')
    ->save(TRUE);

  $config_ids = array(
    'key.key.widen_key',
    'simplesamlphp_auth.settings'
  );

  // Loop through each configuration and, even if it exists, overwrite it.
  foreach ($config_ids as $config_id) {
    $config_path = \Drupal::service('extension.list.module')->getPath('ducore') . '/config/install/' . $config_id . '.yml';
    $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
    \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
  }
}

/**
 * Permission update for quick_node_clone for existing installs
 */
function ducore_update_9506() {
  // While Rich Text is new we made some updates to the existing file / entity browser.
  \Drupal::service('module_installer')->install(array('quick_node_clone'), TRUE);

  $config_ids = array(
    'user.role.content_editor',
    'user.role.site_admin'
  );

  // Loop through each configuration and, even if it exists, overwrite it.
  foreach ($config_ids as $config_id) {
    $config_path = \Drupal::service('extension.list.module')->getPath('ducore') . '/config/install/' . $config_id . '.yml';
    $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
    \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
  }
}

/**
 * Enable views_json_source module on existing installs
 */
function ducore_update_9507() {
  \Drupal::service('module_installer')->install(array('views_json_source'), TRUE);
}
/**
 * Adding usage report views to previously installed sites
 */
function ducore_update_9509() { 
  $views = array(
    'views.view.usage_content_type',
    'views.view.usage_files',
    'views.view.usage_media',
    'views.view.usage_paragraph_type',
    'views.view.usage_taxonomy',
    'views.view.usage_user',
  );

  foreach ($views as $view) {
    $config_path = \Drupal::service('extension.list.module')->getPath('ducore') . '/config/install/' . $view . '.yml';
    $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
    \Drupal::configFactory()->getEditable($view)->setData($data)->save(TRUE);
  }
}

/**
 * Enable Editoria11y modules on existing installs
 */
function ducore_update_9510() {
  $modules = array(
    'editoria11y',
    'menu_item_extras');
  \Drupal::service('module_installer')->install($modules, TRUE);
}

/**
 * Enable Crop and CKEditor Media Embed modules on existing installs
 */
function ducore_update_9511() {
  $modules = array(
    'crop',
    'ckeditor_media_embed');
  \Drupal::service('module_installer')->install($modules, TRUE);
}

 /**
 * Enable Crop and CKEditor Media Embed modules on existing installs
 */
function ducore_update_9512() {
  $modules = array(
    'crop',
    'ckeditor_media_embed');
  \Drupal::service('module_installer')->install($modules, TRUE);
}


/**
 * Permission update for Text Editor roles
 */
function ducore_update_9513() {
  // This gives permissions for auth_user, site editors, owners, site_admins
  \Drupal::service('module_installer')->install(array('editor'), TRUE);

  $config_ids = array(
    'user.role.edit_own',
    'user.role.content_editor',
    'user.role.site_admin',
    'filter.format.rich_text',
    'editor.editor.rich_text'
  );

  // Loop through each configuration and, even if it exists, overwrite it.
  foreach ($config_ids as $config_id) {
    $config_path = \Drupal::service('extension.list.module')->getPath('ducore') . '/config/install/' . $config_id . '.yml';
    $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
    \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
  }
}

/**
 * Enable menu_block module on existing installs
 */
function ducore_update_9514() {
  \Drupal::service('module_installer')->install(array('menu_block'), TRUE);
}


/**
 * Permission for new user_admin role
 */
function ducore_update_9515() {

  $config_ids = array(
    'user.role.user_admin'
  );

  // Loop through each configuration and, even if it exists, overwrite it.
  foreach ($config_ids as $config_id) {
    $config_path = \Drupal::service('extension.list.module')->getPath('ducore') . '/config/install/' . $config_id . '.yml';
    $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
    \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
  }
}

/**
 * Install the bootstrap theme on existing sites.
 */
function ducore_update_9516() {
  $logger = \Drupal::logger('ducore');
  $logger->notice('Starting ducore_update_9017 - Theme installation');

  // Store the original theme before any changes
  $original_theme = \Drupal::config('system.theme')->get('default');
  $logger->notice('Storing original theme: @theme', ['@theme' => $original_theme]);
  \Drupal::state()->set('ducore.original_theme', $original_theme);

  // Check if the theme is already installed.
  $theme_handler = \Drupal::service('theme_handler');
  if (!$theme_handler->themeExists('du_bootstrap')) {
    // Install the theme
    $logger->notice('Installing du_bootstrap theme');
    \Drupal::service('theme_installer')->install(['du_bootstrap']);
  }
  else {
    $logger->notice('du_bootstrap theme already installed');
  }

  $logger->notice('ducore_update_9017 completed successfully');
}

/**
 * Map PL themes to du_bootstrap and copy blocks.
 */
function ducore_update_9517() {
  $logger = \Drupal::logger('ducore');
  $logger->notice('Starting ducore_update_9018 - Theme migration process');

  // Define blocks to skip
  $blocks_to_skip = [
    'local_tasks_block', // Tabs block
    // Add more blocks to skip here
  ];

  // Check if du_bootstrap is already the default theme
  $current_theme = \Drupal::config('system.theme')->get('default');
  $logger->notice('Current default theme: @theme', ['@theme' => $current_theme]);

  if ($current_theme === 'du_bootstrap') {
    $logger->notice('du_bootstrap is already the default theme, skipping block operations');
    return;
  }

  // First, remove all existing du_bootstrap blocks
  $existing_blocks = \Drupal::entityTypeManager()
    ->getStorage('block')
    ->loadByProperties(['theme' => 'du_bootstrap']);

  $logger->notice('Found @count existing du_bootstrap blocks to remove', ['@count' => count($existing_blocks)]);

  foreach ($existing_blocks as $block) {
    $logger->debug('Removing block: @id (plugin: @plugin, region: @region)', [
      '@id' => $block->id(),
      '@plugin' => $block->getPluginId(),
      '@region' => $block->getRegion()
    ]);
    $block->delete();
  }

  // Get the original theme from state
  $original_theme = \Drupal::state()->get('ducore.original_theme');
  $logger->notice('Original theme from state: @theme', ['@theme' => $original_theme ?: 'not found']);

  // If we have an original theme, use it for block copying
  if ($original_theme) {
    $theme_mapping = [
      'pl_drupal' => 'core',
      'pl_unit' => 'unit',
      'pl_micro' => 'micro',
    ];

    if (isset($theme_mapping[$original_theme])) {
      $logger->notice('Mapping original theme @original to subtheme @subtheme',
        ['@original' => $original_theme, '@subtheme' => $theme_mapping[$original_theme]]);

      \Drupal::configFactory()
        ->getEditable('du_bootstrap.settings')
        ->set('subtheme_selection', $theme_mapping[$original_theme])
        ->save(TRUE);
    }

    // Copy blocks from original theme
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(['theme' => $original_theme]);

    $logger->notice('Found @count blocks to copy from @theme',
      ['@count' => count($blocks), '@theme' => $original_theme]);

    $copied_count = 0;
    $skipped_count = 0;
    $error_count = 0;

    foreach ($blocks as $block) {
      $plugin_id = $block->getPluginId();

      // Skip specified blocks.
      if (in_array($plugin_id, $blocks_to_skip)) {
        $logger->debug('Skipping block (in skip list): @id', ['@id' => $block->id()]);
        $skipped_count++;
        continue;
      }

      // Clean up the block ID by removing theme prefix.
      $base_id = preg_replace('/^' . preg_quote($original_theme . '_', '/') . '/', '', $block->id());
      $new_id = $base_id . '_du_bootstrap';

      $values = [
        'id' => $new_id,
        'theme' => 'du_bootstrap',
        'region' => $block->getRegion(),
        'weight' => $block->getWeight(),
        'plugin' => $plugin_id,
        'settings' => $block->get('settings'),
        'visibility' => $block->get('visibility'),
      ];

      try {
        // Validate block plugin exists.
        $plugin_manager = \Drupal::service('plugin.manager.block');
        if (!$plugin_manager->hasDefinition($plugin_id)) {
          throw new \Exception("Block plugin {$plugin_id} does not exist");
        }

        $logger->debug('Creating new block: @id in region @region',
          ['@id' => $values['id'], '@region' => $values['region']]);

        $new_block = \Drupal\block\Entity\Block::create($values);
        $new_block->save();
        $copied_count++;
      }
      catch (\Exception $e) {
        $logger->error('Failed to create block @id: @message',
          ['@id' => $values['id'], '@message' => $e->getMessage()]);
        $error_count++;
      }
    }

    $logger->notice('Block copying complete: @copied copied, @skipped skipped, @errors errors',
      ['@copied' => $copied_count, '@skipped' => $skipped_count, '@errors' => $error_count]);
  }
  else {
    $logger->notice('No original theme found, setting up default blocks');

    // Set up default block placements for new installs.
    $default_blocks = [
      'system_main_block' => [
        'region' => 'content',
        'weight' => 0,
      ],
      'system_menu_block:main' => [
        'region' => 'primary_menu',
        'weight' => 0,
      ],
      'system_branding_block' => [
        'region' => 'header',
        'weight' => 0,
      ],
      'system_menu_block:account' => [
        'region' => 'secondary_menu',
        'weight' => 0,
      ],
      'system_powered_by_block' => [
        'region' => 'footer',
        'weight' => 0,
      ],
    ];

    foreach ($default_blocks as $plugin_id => $settings) {
      $values = [
        'id' => str_replace(':', '_', $plugin_id),
        'theme' => 'du_bootstrap',
        'region' => $settings['region'],
        'weight' => $settings['weight'],
        'plugin' => $plugin_id,
      ];

      $logger->debug('Creating default block: @id in region @region',
        ['@id' => $values['id'], '@region' => $values['region']]);

      $block = \Drupal\block\Entity\Block::create($values);
      $block->save();
    }

    $logger->notice('Default blocks setup complete');
  }

  // Set du_bootstrap as the default theme after all block operations are complete.
  $logger->notice('Setting du_bootstrap as default theme');
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'du_bootstrap')
    ->save(TRUE);

  $logger->notice('ducore_update_9018 completed successfully');
}

/**
 * Enables views_data_export and imports view for Users JSON
 */
function ducore_update_9518() {
  \Drupal::service('module_installer')->install('views_data_export');

  $view_name = 'user_json';
  $view_config = \Drupal::service('config.storage.sync')->read('views.view.' . $view_name);

  // Import View into Site
  if ($view_config) {
    \Drupal::configFactory()->getEditable('views.view.' . $view_name)
      ->setData($view_config)
      ->save();
    \Drupal::messenger()->addMessage('User JSON view imported successfully.');
  }
  else {
    \Drupal::messenger()->addMessage('View configuration for user_json not found.');
  }
}